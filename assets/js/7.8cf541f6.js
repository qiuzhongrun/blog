(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{425:function(t,a,e){t.exports=e.p+"assets/img/jvmmm.47725a4a.jpeg"},426:function(t,a,e){t.exports=e.p+"assets/img/java8jvmmm-luoqiu.3f70cc54.jpg"},427:function(t,a,e){t.exports=e.p+"assets/img/java8jvmmm-xaiocaijishu.9114aafd.jpg"},428:function(t,a,e){t.exports=e.p+"assets/img/stackframes.4c4c7aa5.jpeg"},429:function(t,a,e){t.exports=e.p+"assets/img/stackframe-location.7505ad52.jpeg"},430:function(t,a,e){t.exports=e.p+"assets/img/programcounter-work-flow.cb44183d.jpeg"},454:function(t,a,e){"use strict";e.r(a);var r=e(17),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("最近在学习李国的《深入浅出Java虚拟机》，结合02讲和18讲的内容，做一下笔记。\n这里讨论的Java内存模型是一个广义的概念，分为两部分，一部分是JVM存储内存模型，另一部分是Java多线程内存模型。前者和数据存储相关，后者主要和多线程相关。")]),t._v(" "),r("h1",{attrs:{id:"jvm存储内存模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm存储内存模型"}},[t._v("#")]),t._v(" JVM存储内存模型")]),t._v(" "),r("p",[t._v("JVM存储内存模型图一\n"),r("img",{attrs:{src:e(425),alt:"jvmmm.jpeg"}})]),t._v(" "),r("p",[t._v("JVM存储内存模型图二\n"),r("img",{attrs:{src:e(426),alt:"java8jvmmm-luoqiu.jpg"}})]),t._v(" "),r("p",[t._v("JVM存储内存模型图三\n"),r("img",{attrs:{src:e(427),alt:"java8jvmmm-xaiocaijishu.jpg"}})]),t._v(" "),r("p",[t._v("充分阅读以上三个图，从不同角度建立JVM存储内存模型在脑海中的记忆。")]),t._v(" "),r("h2",{attrs:{id:"栈桢"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈桢"}},[t._v("#")]),t._v(" 栈桢")]),t._v(" "),r("p",[t._v("栈是一个先进先出的概念，包含java虚拟机栈和本地方法栈，他们的原理是类似的。")]),t._v(" "),r("p",[t._v("栈桢是指栈里的一批数据，它是函数的执行步骤集合。对于JVM来说，程序就是存储在方法区的字节指令码，我们所说的方法调用，就是指将方法的每一条指令压入栈，形成一个栈桢，然后一步步执行。栈桢执行完毕后，函数也执行完毕了。所有当前线程的栈桢都执行完毕出栈了，那么线程也就执行完毕了。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(428),alt:"stackframes.jpeg"}})]),t._v(" "),r("p",[t._v("每个栈桢都包含4个区域：")]),t._v(" "),r("ul",[r("li",[t._v("局部变量表")]),t._v(" "),r("li",[t._v("操作数栈")]),t._v(" "),r("li",[t._v("动态链接")]),t._v(" "),r("li",[t._v("返回地址")])]),t._v(" "),r("h3",{attrs:{id:"局部变量表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[t._v("#")]),t._v(" 局部变量表")]),t._v(" "),r("p",[t._v("局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。")]),t._v(" "),r("p",[r("em",[t._v("单位槽Solt")]),t._v("局部变量表的容量以单位槽为最小单位，虚拟机规范中并没有明确指定一个Solt应占的内存空间大小，只是说Solt应该可以存储下小于或者等于一个字节类型的数据。long和double类型是分割存储在多个单位槽的，这些资源是线程独占的，不会带来线程安全问题。")]),t._v(" "),r("p",[r("em",[t._v("填充顺序")]),t._v("先分配方法所在类的实例的引用“this”关键字（作为参数传入）接下来是其余的参数，参数表分配完毕后再根据方法体内部定义的变量顺序和作用域分配其余Solt。")]),t._v(" "),r("p",[r("em",[t._v("Solt空间重用")]),t._v("为了节省栈帧的空间，局部变量表中的Slot是可以重用的，方法体重定义的变量，其作用域不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超出了某个变量的作用域，那这个变量对应的Solt就可以交给其他变量使用。不过这样的设计除了节省栈空间以外还会伴随一些额外的副作用，例如在某些情况下，Solt复用会直接影响到垃圾收集器的行为。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(429),alt:"stackframe-location.jpeg"}})]),t._v(" "),r("p",[t._v("我们知道了栈桢对应的是方法，而方法必然存在参数、返回值这些东西。但是我们都知道java是多线程的，那么栈桢执行如果遇到程序切换，该如何应对呢？我们接着往下看程序计数器的概念。")]),t._v(" "),r("h2",{attrs:{id:"程序计数器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[t._v("#")]),t._v(" 程序计数器")]),t._v(" "),r("p",[t._v("程序计数器是一块很小的空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(430),alt:"programcounter-work-flow.jpeg"}})]),t._v(" "),r("p",[t._v("由上图可以看出，程序计数器也是因为线程而产生的，与虚拟机栈配合完成计算操作。程序计数器还存储了当前正在运行的流程，包括正在执行的指令、跳转、分支、循环、异常处理等。")]),t._v(" "),r("p",[t._v("参考：")]),t._v(" "),r("ol",[r("li",[t._v("李国 深入浅出Java虚拟机")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/sdp1103285470/article/details/86754750",target:"_blank",rel:"noopener noreferrer"}},[t._v("栈帧——深入理解Java虚拟机"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.processon.com/u/5e996e37f346fb4bdd738ede",target:"_blank",rel:"noopener noreferrer"}},[t._v("java8jvmmm-luoqiu.jpg"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.processon.com/u/5d4a85dbe4b0f4c23d640654",target:"_blank",rel:"noopener noreferrer"}},[t._v("java8jvmmm-xaiocaijishu.jpg"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);